﻿@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Services;
@using Sandbox.Utility;
@inherits PanelComponent
@implements Component.INetworkListener
@namespace GeneralGame

<root style="pointer-events: @(isSelect ? "all" : "none");">
	@if (Tools[ind] != "Camera") {
	<div class="output">
		@foreach (var entry in Entries)
		{
			<div class="chat_entry">
				<div class="author">@entry.author</div>:
				<div class="message">@entry.message</div>
			</div>
		}
	</div>
	}
	<div class="tool">Current Tool: @Tools[ind]</div>
	@if (Tools[ind] != "Camera") {
	<div class="info">ping: @Networking.HostConnection.Ping, Press q to select model, Press m to change map(server only), Press g to next tool</div>
	<div class="health">Health: @(Playercontroller.Local != null ? Playercontroller.Local.Health : -1)</div>
	<div class="crosshair" />
	<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
	<div class="tools">
		@for (int i = 0; i < Tools.Length; i++) {
			<div class="tool1">
				@(i+1): @Tools[i]
			</div>
		}
	</div>
	}
	@if (isSelect) {
		<div class="modelback">
			<PackageList ShowFilters="@true" style="padding-bottom: 50px;" Query="type:model sort:trending" OnSelected="@OnPackageSelected" Take=@(50)></PackageList>
		</div>
	}
	@if (menu) {
		<div class="menu">
			<button class="disconnect" OnClick="@Disconnect">Disconnect</button>
			<button class="exit" OnClick="@Close">Close</button>
		</div>
	}
</root>

@code
{
	public record Entry( string author, string message, RealTimeSince timeSinceAdded );
	int ind = 0;
	string[] Tools = ["PhysGun", "Spawner", "Dublicator", "Gun", "Scale", "GravGun(too stange)", "Thruster", "Remove", "Color", "Balloon", "Light", "Camera", "Info", "Save&Quit(lmb)", "Rope", "Weld", "Lidar", "CreateTerry"];
	private TextEntry InputBox { get; set; }
	bool isSelect = false;
	bool menu = false;
	private List<Entry> Entries { get; set; } = new();
	async void OnPackageSelected( Package package ) {
		var packageg = await Package.FetchAsync(package.FullIdent, false);
		await packageg.MountAsync();
		isSelect = false;
		Log.Info( package.FullIdent );
		Playercontroller.Local.model = Model.Load(packageg.GetMeta("PrimaryAsset", ""));
		Playercontroller.Local.color = Color.White;
		Playercontroller.Local.ModelLoad(package.FullIdent, true);
	}

	private void OnMapPress()
	{
		Game.ActiveScene.LoadFromFile("scenes/custommap.scene");
	}
	private void Disconnect()
	{
		Game.ActiveScene.LoadFromFile("scenes/lobby.scene");
	}
	private void Close()
	{
		Game.Close();
	}
	protected override void OnAwake()
	{
		base.OnAwake();
		AddTextLocal("System", $"{Steam.PersonaName} has joined the game");
	}
	protected override void OnUpdate()
	{
		if (Input.Pressed("Drop")) {
			ind++;
			ind = ind % (int)Tools.Count();
		}
		if (Input.Pressed("Model")) {
			isSelect = true;
		}
		if (Input.Pressed("Map") && Networking.IsHost) {
			OnMapPress();
		}
		if (Input.EscapePressed)
		{
			menu = !menu;
		}
		for ( int i = 0; i < (int)Tools.Count(); i++ ) {
			if ( Input.Pressed($"Slot{i+1}") ) {
				ind = i;
			}
		}
		if ( InputBox is not null ) {

			Panel.AcceptsFocus = false;

			if ( Input.Pressed( "chat" ) )
			{
				InputBox.Focus();
			}

			Entries.RemoveAll(x => x.timeSinceAdded > 30f);

			SetClass( "open", InputBox.HasFocus );
		}
		StateHasChanged();
	}

	private void ChatFinished()
	{
		var text = InputBox.Text;
		InputBox.Text = "";

		if ( string.IsNullOrWhiteSpace( text ) )
			return;

		SendText( Sandbox.Utility.Steam.PersonaName, text );
	}

	[Broadcast]
	private void SendText( string author, string message )
	{
		AddTextLocal( author, message );
	}

	public void AddTextLocal( string author, string message )
	{
		message = message.Truncate( 300 );

		if ( string.IsNullOrWhiteSpace( message ) )
			return;

		Log.Info( $"{author}: {message}" );

		Entries.Add( new ( author, message, 0f ) );
		StateHasChanged();
	}

	void INetworkListener.OnConnected(Connection channel)
	{
		if (IsProxy) return;

		SendText("System", $"{channel.DisplayName} has joined the game");
	}

	void INetworkListener.OnDisconnected(Connection channel)
	{
		if (IsProxy) return;

		SendText("System", $"{channel.DisplayName} has left the game");
	}
}
