﻿@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Services;
@using Sandbox.Utility;
@inherits PanelComponent
@implements Component.INetworkListener
@namespace GeneralGame

<root style="pointer-events: @(isSelect ? "all" : "none");">
	@if (ind != 5) {
	<div class="output">
		@foreach (var entry in Entries)
		{
			<div class="chat_entry">
				<div class="author">@entry.author</div>:
				<div class="message">@entry.message</div>
			</div>
		}
	</div>
	}
	<div class="tool">Current Tool: @Tools[ind]</div>
	@if (ind != 5) {
	<div class="info">ping: @Networking.HostConnection.Ping, Press q to select model, Press g to next tool</div>
	<div class="health">Health: @(Playercontroller.Local != null ? Playercontroller.Local.Health : -1)</div>
	@if (isSelect) {
		<div class="modelback">
			<PackageList ShowFilters="@true" style="padding-bottom: 50px;" Query="type:model sort:trending" OnSelected="@OnPackageSelected" Take=@(50)></PackageList>
		</div>
	}
	<div class="crosshair" />
	<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
	}
	<div class="tools">
		@foreach (var tool in Tools) {
			<div class="tool1">
				@tool
			</div>
		}
	</div>
</root>

@code
{
	public record Entry( string author, string message, RealTimeSince timeSinceAdded );
	int ind = 0;
	string[] Tools = ["PhysGun", "Gun", "Scale", "GravGun(too stange)", "Remove", "Color", "Balloon", "Display", "Save&Quit(lmb)", "Rope", "Weld"];
	private TextEntry InputBox { get; set; }
	bool isSelect = false;
	private List<Entry> Entries { get; set; } = new();
	async void OnPackageSelected( Package package ) {
		var packageg = await Package.FetchAsync(package.FullIdent, false);
		await packageg.MountAsync();
		isSelect = false;
		Log.Info( package.FullIdent );
		Playercontroller.Local.model = Model.Load(packageg.GetMeta("PrimaryAsset", ""));
		Playercontroller.Local.color = Color.White;
	}
	protected override void OnUpdate()
    {
		if (Input.Pressed("Drop")) {
			ind++;
			ind = ind % (int)Tools.Count();
		}
		if (Input.Pressed("Model")) {
			isSelect = true;
		}
		for ( int i = 0; i < (int)Tools.Count(); i++ ) {
			if ( Input.Pressed($"Slot{i+1}") ) {
				ind = i;
			}
		}
		if ( InputBox is not null ) {

			Panel.AcceptsFocus = false;

			if ( Input.Pressed( "chat" ) )
			{
				InputBox.Focus();
			}

			if ( Entries.RemoveAll( x => x.timeSinceAdded > 30f ) > 0 )
			{
				StateHasChanged();
			}

			SetClass( "open", InputBox.HasFocus );
		}
		StateHasChanged();
	}

	private void ChatFinished()
	{
		var text = InputBox.Text;
		InputBox.Text = "";

		if ( string.IsNullOrWhiteSpace( text ) )
			return;

		SendText( Sandbox.Utility.Steam.PersonaName, text );
	}

	[Broadcast]
	private void SendText( string author, string message )
	{
		AddTextLocal( author, message );
	}

	public void AddTextLocal( string author, string message )
	{
		message = message.Truncate( 300 );

		if ( string.IsNullOrWhiteSpace( message ) )
			return;

		Log.Info( $"{author}: {message}" );

		Entries.Add( new ( author, message, 0f ) );
		StateHasChanged();
	}
}
